<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.study.springboot.dao.IReviewDao">

	<select id="reviewList" resultType="com.study.springboot.dto.ReviewDto">
		select * from
			(select rownum rnum, pr.* from
				(select * from product_review
				 <if test="param1 != null">where ${param1} = #{param2}</if>
				order by ${param5} desc) pr
			<where>
			<if test="param6 != null">
			review_title like '%${param6}%'
			or review_content like '%${param6}%'
			</if>
			</where>
		)where rnum between #{param3} and #{param4}	
	</select>
	
	<select id="reviewCount" resultType="_int">
		select count(*) from product_review
		<where>
			<if test="param1 != null">
			${param1} = #{param2}
			</if>
			<if test="param3 != null">
			and review_title like '%${param3}%'
			or review_content like '%${param3}%'
			</if>
			</where>
	</select>
	
	<select id="reviewAvg" resultType="_double">
		SELECT NVL(avg, 0)FROM 
		(select round(avg(review_star_rating), 1) avg from product_review
		where product_idx = #{param1})
	</select>
	
	<resultMap type="com.study.springboot.dto.ReviewDto" id="review_star">	
	<result column="star_score" property="star_score"/>	
	</resultMap>
	
	<resultMap type="com.study.springboot.dto.ReviewDto" id="ReviewDto">	
	<collection property="Star" resultMap="Star"></collection>
	</resultMap>
	
	<select id="reviewGraph" resultType="com.study.springboot.dto.ReviewDto">
		select s.star_score, nvl(a.c, 0) count from
		(select review_star_rating, count(review_star_rating) c
		from product_review where product_idx = #{param1}
		group by review_star_rating) a, review_star s
		where a.review_star_rating(+) = s.star_score
		order by s.star_score desc
	</select>
	
	<insert id="insertReview" parameterType="com.study.springboot.dto.ReviewDto">
		insert into product_review
		values ( product_review_seq.nextval, #{review_id}, #{review_title}, 
		#{review_content}, #{review_image}, sysdate, #{review_star_rating}, #{product_idx} )
	</insert>
	
	<delete id="deleteReview">
	  DELETE FROM product_review
	  WHERE review_idx=#{ param1 }
	</delete>
	
	<!-- 리뷰 목록 리스트 -->
	<select id="review_result" resultType="com.study.springboot.dto.ReviewDto">
		SELECT 
		   review.review_idx, review.review_id, prod.product_name, prod.product_idx, 
		   review.review_date, review.review_content, review.review_title, review.review_star_rating
		FROM 
		    product_review review
		JOIN 
		    PRODUCT prod
		ON 
		    review.product_idx = prod.product_idx
	</select>
	
	<!-- 리뷰 개수 -->
	<select id="review_count" resultType="Integer">
		SELECT COUNT(*) FROM product_review 
	</select>
	
 	<!-- 리뷰 검색 -->
	 <select id="reviewResult" resultType="com.study.springboot.dto.ReviewDto">
		SELECT 
		   review.review_idx, review.review_id, prod.product_name, prod.product_idx, 
		   review.review_date, review.review_content, review.review_title, review.review_star_rating
		FROM 
		    product_review review, PRODUCT prod
		where  
            prod.product_idx = review.product_idx
        And
            ${param1} like '%${param2}%'
	
	</select>
	
<!-- 	날짜조회 검색
	<select id="reviewSearchDate" resultType="com.study.springboot.dto.ReviewDto">
		SELECT
			review.review_idx, review.review_id, prod.product_name, prod.product_idx, 
		    review.review_date, review.review_content, review.review_title, review.review_star_rating
		FROM
			product_review review, PRODUCT prod
		WHERER
			review.review_date BETWEEN  TO_DATE('2022-04-01', 'YYYY-MM-DD') AND SYSDATE
	</select>
	 -->
	<select id="reviewDate" resultType="com.study.springboot.dto.ReviewDto">
	SELECT
         review.review_idx, review.review_id, prod.product_name, prod.product_idx, 
          review.review_date, review.review_content, review.review_title, review.review_star_rating
	FROM
         product prod 
	LEFT JOIN 
		product_review review
	ON 
		prod.product_idx = review.product_idx
	WHERE 
		prod.product_idx = #{product_idx}
	<if test="from_date != null and to_date != null">
		and TO_CHAR(review.review_date , 'YYYY-MM-DD') between TO_CHAR(#{from_date}, 'YYYY-MM-DD') and TO_CHAR(#{to_date} , 'YYYY-MM-DD')
	</if>
	</select>
	
	
<!--    <resultMap type="com.study.springboot.dto.ProductDto" id="ProductDto">
	<result column="product_idx" property="product_idx"/>
	<result column="product_name" property="product_name"/>
	<result column="product_image" property="product_image"/>	
	<result column="product_price" property="product_price"/>
	<result column="product_category" property="product_category"/>
	<result column="product_gram" property="product_gram"/>
	<result column="product_explanation" property="product_explanation"/>
	</resultMap>
	
	<resultMap type="com.study.springboot.dto.ReviewDto" id="ReviewDto2">
	<result column="product_idx" property="product_idx"/>	
	<collection property="productDto" resultMap="ProductDto"></collection>
	</resultMap> -->
	
<!-- 	<select id="searchProduct" resultMap="ReviewDto2">
		select * from
		(select round(avg(review_star_rating), 1) starRating, pr.product_idx from product_review pr
		group by pr.product_idx) r, product p
		where r.product_idx(+) = p.product_idx
		and p.product_name like '%${param1}%'
		<if test="param2 != 'select'">
			<include refid="searchSort"></include>
		</if>
	</select>
	
	<sql id="searchSort">
		<if test="param2 == 'star_rating'">
			order by r.starRating desc nulls last
		</if>
		<if test="param2 == 'price_high'">
			order by p.product_price desc nulls last
		</if>
		<if test="param2 == 'prict_row'">
			order by p.product_price nulls last
		</if>
	</sql> 
	 -->
</mapper>